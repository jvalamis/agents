name: Modernize Website Pipeline

on:
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      website_url:
        description: "URL"
        required: true

jobs:
  product_owner:
    name: Product Owner Agent
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get Website URL
        id: get-url
        run: |
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "url=${{ github.event.issue.body }}" >> $GITHUB_OUTPUT
          else
            echo "url=${{ github.event.inputs.website_url }}" >> $GITHUB_OUTPUT
          fi

      - name: Analyze Website with GPT-4
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAPI }}
        run: |
          # Create a temporary Python script
          cat > analyze.py << 'EOF'
          import os
          import json
          import requests
          from urllib.parse import urlparse

          def analyze_website(url):
              headers = {
                  "Authorization": f"Bearer {os.environ['OPENAI_API_KEY']}",
                  "Content-Type": "application/json"
              }
              
              prompt = f"""Analyze this website URL and provide a modernization plan:
              URL: {url}
              
              Please provide:
              1. Current website analysis
              2. Modernization goals
              3. Technical requirements
              4. Implementation steps
              
              Format the response as a JSON object with these keys:
              - analysis
              - goals
              - requirements
              - steps
              """
              
              data = {
                  "model": "gpt-4-turbo-preview",
                  "messages": [{"role": "user", "content": prompt}],
                  "temperature": 0.7
              }
              
              response = requests.post(
                  "https://api.openai.com/v1/chat/completions",
                  headers=headers,
                  json=data
              )
              
              if response.status_code == 200:
                  result = response.json()
                  content = result['choices'][0]['message']['content']
                  try:
                      # Try to parse as JSON
                      plan = json.loads(content)
                      print(json.dumps(plan, indent=2))
                  except json.JSONDecodeError:
                      # If not valid JSON, print as is
                      print(content)
              else:
                  print(f"Error: {response.status_code}")
                  print(response.text)

          if __name__ == "__main__":
              url = os.environ.get('WEBSITE_URL')
              if url:
                  analyze_website(url)
              else:
                  print("No website URL provided")
          EOF

          # Install required packages
          pip install requests

          # Run the analysis
          WEBSITE_URL="${{ steps.get-url.outputs.url }}" python analyze.py > analysis.json

      - name: Create Modernization Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const analysis = JSON.parse(fs.readFileSync('analysis.json', 'utf8'));

            const body = `## Website Analysis
            ${analysis.analysis}

            ## Modernization Goals
            ${analysis.goals}

            ## Technical Requirements
            ${analysis.requirements}

            ## Implementation Steps
            ${analysis.steps}

            Original URL: ${{ steps.get-url.outputs.url }}`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Modernization Plan: ${new URL(steps.get-url.outputs.url).hostname}`,
              body: body
            });

      - name: Upload Analysis Artifact
        uses: actions/upload-artifact@v4
        with:
          name: modernization-analysis
          path: analysis.json
          retention-days: 30
